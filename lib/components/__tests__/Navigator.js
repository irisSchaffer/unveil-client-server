'use strict';

jest.dontMock('../Navigator');

var createNavigator = require('../Navigator').default;
var fixture = require('./fixtures/RoutesMap').default;

describe('Navigator', function () {
  var navigator = undefined;

  beforeEach(function () {
    navigator = createNavigator(fixture());
  });

  describe('directions', function () {
    var t = function t(name, state, level, direction, result) {
      return it(name, function () {
        var directions = navigator.getDirections(state, fixture());
        expect(directions[level][direction]).toEqual(result);
      });
    };

    var n = function n(name, state, level, result) {
      return t(name, state, level, 'next', result);
    };
    var p = function p(name, state, level, result) {
      return t(name, state, level, 'previous', result);
    };

    n('gets directions for 1st level with successor', [1], 0, [2]);
    p('gets directions for 1st level with predecessor', [1], 0, [0]);
    n('gets directions for 1st level without successor', [3, 0], 0, false);
    p('gets directions for 1st level without predecessor', [0, 0], 0, false);

    n('gets directions for 2nd level with successor', [3, 0], 1, [3, 1]);
    p('gets directions for 2nd level with predecessor', [3, 1], 1, [3, 0]);
    n('gets directions for 2nd level without successor', [2, 1], 1, false);
    p('gets directions for 2nd level without predecessor', [2, 0], 1, false);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL19fdGVzdHNfXy9OYXZpZ2F0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxLQUFLLFFBQUwsQ0FBYyxjQUFkOztBQUVBLElBQU0sa0JBQWtCLFFBQVEsY0FBUixFQUF3QixPQUF4QjtBQUN4QixJQUFNLFVBQVUsUUFBUSxzQkFBUixFQUFnQyxPQUFoQzs7QUFFaEIsU0FBUyxXQUFULEVBQXNCLFlBQU07QUFDMUIsTUFBSSxxQkFBSixDQUQwQjs7QUFHMUIsYUFBWSxZQUFNO0FBQ2hCLGdCQUFZLGdCQUFnQixTQUFoQixDQUFaLENBRGdCO0dBQU4sQ0FBWixDQUgwQjs7QUFPMUIsV0FBUyxZQUFULEVBQXVCLFlBQU07QUFDM0IsUUFBSSxJQUFJLFNBQUosQ0FBSSxDQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsS0FBZCxFQUFxQixTQUFyQixFQUFnQyxNQUFoQzthQUEyQyxHQUFHLElBQUgsRUFBUyxZQUFNO0FBQ2hFLFlBQUksYUFBYSxVQUFVLGFBQVYsQ0FBd0IsS0FBeEIsRUFBK0IsU0FBL0IsQ0FBYixDQUQ0RDtBQUVoRSxlQUFPLFdBQVcsS0FBWCxFQUFrQixTQUFsQixDQUFQLEVBQXFDLE9BQXJDLENBQTZDLE1BQTdDLEVBRmdFO09BQU47S0FBcEQsQ0FEbUI7O0FBTTNCLFFBQUksSUFBSSxTQUFKLENBQUksQ0FBQyxJQUFELEVBQU8sS0FBUCxFQUFjLEtBQWQsRUFBcUIsTUFBckI7YUFBZ0MsRUFBRSxJQUFGLEVBQVEsS0FBUixFQUFlLEtBQWYsRUFBc0IsTUFBdEIsRUFBOEIsTUFBOUI7S0FBaEMsQ0FObUI7QUFPM0IsUUFBSSxJQUFJLFNBQUosQ0FBSSxDQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsS0FBZCxFQUFxQixNQUFyQjthQUFnQyxFQUFFLElBQUYsRUFBUSxLQUFSLEVBQWUsS0FBZixFQUFzQixVQUF0QixFQUFrQyxNQUFsQztLQUFoQyxDQVBtQjs7QUFTM0IsTUFBRSw4Q0FBRixFQUFrRCxDQUFDLENBQUQsQ0FBbEQsRUFBdUQsQ0FBdkQsRUFBMEQsQ0FBQyxDQUFELENBQTFELEVBVDJCO0FBVTNCLE1BQUUsZ0RBQUYsRUFBb0QsQ0FBQyxDQUFELENBQXBELEVBQXlELENBQXpELEVBQTRELENBQUMsQ0FBRCxDQUE1RCxFQVYyQjtBQVczQixNQUFFLGlEQUFGLEVBQXFELENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBckQsRUFBNkQsQ0FBN0QsRUFBZ0UsS0FBaEUsRUFYMkI7QUFZM0IsTUFBRSxtREFBRixFQUF1RCxDQUFDLENBQUQsRUFBSSxDQUFKLENBQXZELEVBQStELENBQS9ELEVBQWtFLEtBQWxFLEVBWjJCOztBQWMzQixNQUFFLDhDQUFGLEVBQWtELENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBbEQsRUFBMEQsQ0FBMUQsRUFBNkQsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUE3RCxFQWQyQjtBQWUzQixNQUFFLGdEQUFGLEVBQW9ELENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBcEQsRUFBNEQsQ0FBNUQsRUFBK0QsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUEvRCxFQWYyQjtBQWdCM0IsTUFBRSxpREFBRixFQUFxRCxDQUFDLENBQUQsRUFBSSxDQUFKLENBQXJELEVBQTZELENBQTdELEVBQWdFLEtBQWhFLEVBaEIyQjtBQWlCM0IsTUFBRSxtREFBRixFQUF1RCxDQUFDLENBQUQsRUFBSSxDQUFKLENBQXZELEVBQStELENBQS9ELEVBQWtFLEtBQWxFLEVBakIyQjtHQUFOLENBQXZCLENBUDBCO0NBQU4sQ0FBdEIiLCJmaWxlIjoiTmF2aWdhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiamVzdC5kb250TW9jaygnLi4vTmF2aWdhdG9yJyk7XG5cbmNvbnN0IGNyZWF0ZU5hdmlnYXRvciA9IHJlcXVpcmUoJy4uL05hdmlnYXRvcicpLmRlZmF1bHQ7XG5jb25zdCBmaXh0dXJlID0gcmVxdWlyZSgnLi9maXh0dXJlcy9Sb3V0ZXNNYXAnKS5kZWZhdWx0O1xuXG5kZXNjcmliZSgnTmF2aWdhdG9yJywgKCkgPT4ge1xuICBsZXQgbmF2aWdhdG9yO1xuXG4gIGJlZm9yZUVhY2goICgpID0+IHtcbiAgICBuYXZpZ2F0b3IgPSBjcmVhdGVOYXZpZ2F0b3IoZml4dHVyZSgpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2RpcmVjdGlvbnMnLCAoKSA9PiB7XG4gICAgbGV0IHQgPSAobmFtZSwgc3RhdGUsIGxldmVsLCBkaXJlY3Rpb24sIHJlc3VsdCkgPT4gaXQobmFtZSwgKCkgPT4ge1xuICAgICAgbGV0IGRpcmVjdGlvbnMgPSBuYXZpZ2F0b3IuZ2V0RGlyZWN0aW9ucyhzdGF0ZSwgZml4dHVyZSgpKTtcbiAgICAgIGV4cGVjdChkaXJlY3Rpb25zW2xldmVsXVtkaXJlY3Rpb25dKS50b0VxdWFsKHJlc3VsdCk7XG4gICAgfSk7XG5cbiAgICBsZXQgbiA9IChuYW1lLCBzdGF0ZSwgbGV2ZWwsIHJlc3VsdCkgPT4gdChuYW1lLCBzdGF0ZSwgbGV2ZWwsICduZXh0JywgcmVzdWx0KTtcbiAgICBsZXQgcCA9IChuYW1lLCBzdGF0ZSwgbGV2ZWwsIHJlc3VsdCkgPT4gdChuYW1lLCBzdGF0ZSwgbGV2ZWwsICdwcmV2aW91cycsIHJlc3VsdCk7XG5cbiAgICBuKCdnZXRzIGRpcmVjdGlvbnMgZm9yIDFzdCBsZXZlbCB3aXRoIHN1Y2Nlc3NvcicsIFsxXSwgMCwgWzJdKTtcbiAgICBwKCdnZXRzIGRpcmVjdGlvbnMgZm9yIDFzdCBsZXZlbCB3aXRoIHByZWRlY2Vzc29yJywgWzFdLCAwLCBbMF0pO1xuICAgIG4oJ2dldHMgZGlyZWN0aW9ucyBmb3IgMXN0IGxldmVsIHdpdGhvdXQgc3VjY2Vzc29yJywgWzMsIDBdLCAwLCBmYWxzZSk7XG4gICAgcCgnZ2V0cyBkaXJlY3Rpb25zIGZvciAxc3QgbGV2ZWwgd2l0aG91dCBwcmVkZWNlc3NvcicsIFswLCAwXSwgMCwgZmFsc2UpO1xuXG4gICAgbignZ2V0cyBkaXJlY3Rpb25zIGZvciAybmQgbGV2ZWwgd2l0aCBzdWNjZXNzb3InLCBbMywgMF0sIDEsIFszLCAxXSk7XG4gICAgcCgnZ2V0cyBkaXJlY3Rpb25zIGZvciAybmQgbGV2ZWwgd2l0aCBwcmVkZWNlc3NvcicsIFszLCAxXSwgMSwgWzMsIDBdKTtcbiAgICBuKCdnZXRzIGRpcmVjdGlvbnMgZm9yIDJuZCBsZXZlbCB3aXRob3V0IHN1Y2Nlc3NvcicsIFsyLCAxXSwgMSwgZmFsc2UpO1xuICAgIHAoJ2dldHMgZGlyZWN0aW9ucyBmb3IgMm5kIGxldmVsIHdpdGhvdXQgcHJlZGVjZXNzb3InLCBbMiwgMF0sIDEsIGZhbHNlKTtcbiAgfSk7XG59KTtcbiJdfQ==