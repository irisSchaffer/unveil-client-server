'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactAddonsTestUtils = require('react-addons-test-utils');

var _reactAddonsTestUtils2 = _interopRequireDefault(_reactAddonsTestUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.dontMock('../UnveilApp');
jest.dontMock('../Router');
jest.dontMock('../Navigator');
jest.dontMock('../UIControls');
jest.dontMock('../KeyControls');
jest.dontMock('../Slide');

var UnveilApp = require('../UnveilApp').default;
var Slide = require('../Slide').default;
var createHistory = require('history/lib/createHashHistory');

var UIControls = require('../UIControls').default;
var KeyControls = require('../KeyControls').default;

var fixture = require('./fixtures/TreeWithoutNestedFirstSlide').default;
var mapFixture = require('./fixtures/MapWithoutNestedFirstSlide').default;

var renderFixture = function renderFixture(options) {
  return _reactAddonsTestUtils2.default.renderIntoDocument(fixture(options));
};

describe('UnveilApp', function () {
  var history = undefined,
      elements = undefined,
      node = undefined,
      controls = undefined;

  var checkContentEquals = function checkContentEquals(content) {
    expect(node.textContent).toEqual(content);
  };

  beforeEach(function () {
    history = createHistory({ queryKey: false });
    controls = [UIControls, KeyControls];
    elements = renderFixture({ history: history, controls: controls });
    node = _reactDom2.default.findDOMNode(elements.refs['current-slide']);
  });

  afterEach(function () {
    elements = node = null;
  });

  it('creates correct map', function () {
    expect(elements.map).toEqual(mapFixture());
  });

  it('saves new states', function () {
    history.push('/1');
    expect(elements.routerState.indices).toEqual([1, 0]);
  });

  var checkContentOnRoute = function checkContentOnRoute(route, content) {
    return function () {
      history.push(route);
      checkContentEquals(content);
    };
  };

  var t = function t(name, path, content) {
    return it(name, checkContentOnRoute(path, content));
  };

  t('routes to first slide', '/', 'Luke');
  t('routes by index', '/1', 'Vincent Vega');
  t('routes by indices', '/1/1', 'Jules effing Winnfield');
  t('routes by name', '/return-of-the-jedi/luke', 'Luke');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL19fdGVzdHNfXy9VbnZlaWxBcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLEtBQUssUUFBTCxDQUFjLGNBQWQ7QUFDQSxLQUFLLFFBQUwsQ0FBYyxXQUFkO0FBQ0EsS0FBSyxRQUFMLENBQWMsY0FBZDtBQUNBLEtBQUssUUFBTCxDQUFjLGVBQWQ7QUFDQSxLQUFLLFFBQUwsQ0FBYyxnQkFBZDtBQUNBLEtBQUssUUFBTCxDQUFjLFVBQWQ7O0FBTUEsSUFBTSxZQUFZLFFBQVEsY0FBUixFQUF3QixPQUF4QjtBQUNsQixJQUFNLFFBQVEsUUFBUSxVQUFSLEVBQW9CLE9BQXBCO0FBQ2QsSUFBTSxnQkFBZ0IsUUFBUSwrQkFBUixDQUFoQjs7QUFFTixJQUFNLGFBQWMsUUFBUSxlQUFSLEVBQXlCLE9BQXpCO0FBQ3BCLElBQU0sY0FBYyxRQUFRLGdCQUFSLEVBQTBCLE9BQTFCOztBQUVwQixJQUFNLFVBQWEsUUFBUSx3Q0FBUixFQUFrRCxPQUFsRDtBQUNuQixJQUFNLGFBQWEsUUFBUSx1Q0FBUixFQUFpRCxPQUFqRDs7QUFFbkIsSUFBSSxnQkFBZ0IsU0FBaEIsYUFBZ0IsQ0FBQyxPQUFEO1NBQWEsK0JBQVUsa0JBQVYsQ0FBOEIsUUFBUSxPQUFSLENBQTlCO0NBQWI7O0FBRXBCLFNBQVMsV0FBVCxFQUFzQixZQUFNO0FBQzFCLE1BQUksbUJBQUo7TUFBYSxvQkFBYjtNQUF1QixnQkFBdkI7TUFBNkIsb0JBQTdCLENBRDBCOztBQUcxQixNQUFJLHFCQUFxQixTQUFyQixrQkFBcUIsQ0FBQyxPQUFELEVBQWE7QUFDcEMsV0FBTyxLQUFLLFdBQUwsQ0FBUCxDQUF5QixPQUF6QixDQUFpQyxPQUFqQyxFQURvQztHQUFiLENBSEM7O0FBTzFCLGFBQVksWUFBTTtBQUNoQixjQUFVLGNBQWMsRUFBRSxVQUFVLEtBQVYsRUFBaEIsQ0FBVixDQURnQjtBQUVoQixlQUFXLENBQUMsVUFBRCxFQUFhLFdBQWIsQ0FBWCxDQUZnQjtBQUdoQixlQUFXLGNBQWMsRUFBRSxnQkFBRixFQUFXLGtCQUFYLEVBQWQsQ0FBWCxDQUhnQjtBQUloQixXQUFPLG1CQUFTLFdBQVQsQ0FBcUIsU0FBUyxJQUFULENBQWMsZUFBZCxDQUFyQixDQUFQLENBSmdCO0dBQU4sQ0FBWixDQVAwQjs7QUFjMUIsWUFBVyxZQUFNO0FBQ2YsZUFBVyxPQUFPLElBQVAsQ0FESTtHQUFOLENBQVgsQ0FkMEI7O0FBa0IxQixLQUFHLHFCQUFILEVBQTBCLFlBQU07QUFDOUIsV0FBTyxTQUFTLEdBQVQsQ0FBUCxDQUFxQixPQUFyQixDQUE2QixZQUE3QixFQUQ4QjtHQUFOLENBQTFCLENBbEIwQjs7QUFzQjFCLEtBQUcsa0JBQUgsRUFBdUIsWUFBTTtBQUMzQixZQUFRLElBQVIsQ0FBYSxJQUFiLEVBRDJCO0FBRTNCLFdBQU8sU0FBUyxXQUFULENBQXFCLE9BQXJCLENBQVAsQ0FBcUMsT0FBckMsQ0FBNkMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUE3QyxFQUYyQjtHQUFOLENBQXZCLENBdEIwQjs7QUEyQjFCLE1BQUksc0JBQXNCLFNBQXRCLG1CQUFzQixDQUFDLEtBQUQsRUFBUSxPQUFSLEVBQW9CO0FBQzVDLFdBQU8sWUFBTTtBQUNYLGNBQVEsSUFBUixDQUFhLEtBQWIsRUFEVztBQUVYLHlCQUFtQixPQUFuQixFQUZXO0tBQU4sQ0FEcUM7R0FBcEIsQ0EzQkE7O0FBa0MxQixNQUFJLElBQUksU0FBSixDQUFJLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxPQUFiO1dBQXlCLEdBQUcsSUFBSCxFQUFTLG9CQUFvQixJQUFwQixFQUEwQixPQUExQixDQUFUO0dBQXpCLENBbENrQjs7QUFvQzFCLElBQUUsdUJBQUYsRUFBMkIsR0FBM0IsRUFBZ0MsTUFBaEMsRUFwQzBCO0FBcUMxQixJQUFFLGlCQUFGLEVBQTJCLElBQTNCLEVBQWlDLGNBQWpDLEVBckMwQjtBQXNDMUIsSUFBRSxtQkFBRixFQUEyQixNQUEzQixFQUFtQyx3QkFBbkMsRUF0QzBCO0FBdUMxQixJQUFFLGdCQUFGLEVBQTJCLDBCQUEzQixFQUF1RCxNQUF2RCxFQXZDMEI7Q0FBTixDQUF0QiIsImZpbGUiOiJVbnZlaWxBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJqZXN0LmRvbnRNb2NrKCcuLi9VbnZlaWxBcHAnKTtcbmplc3QuZG9udE1vY2soJy4uL1JvdXRlcicpO1xuamVzdC5kb250TW9jaygnLi4vTmF2aWdhdG9yJyk7XG5qZXN0LmRvbnRNb2NrKCcuLi9VSUNvbnRyb2xzJyk7XG5qZXN0LmRvbnRNb2NrKCcuLi9LZXlDb250cm9scycpO1xuamVzdC5kb250TW9jaygnLi4vU2xpZGUnKTtcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFRlc3RVdGlscyBmcm9tICdyZWFjdC1hZGRvbnMtdGVzdC11dGlscyc7XG5cbmNvbnN0IFVudmVpbEFwcCA9IHJlcXVpcmUoJy4uL1VudmVpbEFwcCcpLmRlZmF1bHQ7XG5jb25zdCBTbGlkZSA9IHJlcXVpcmUoJy4uL1NsaWRlJykuZGVmYXVsdDtcbmNvbnN0IGNyZWF0ZUhpc3RvcnkgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi9jcmVhdGVIYXNoSGlzdG9yeScpO1xuXG5jb25zdCBVSUNvbnRyb2xzICA9IHJlcXVpcmUoJy4uL1VJQ29udHJvbHMnKS5kZWZhdWx0O1xuY29uc3QgS2V5Q29udHJvbHMgPSByZXF1aXJlKCcuLi9LZXlDb250cm9scycpLmRlZmF1bHQ7XG5cbmNvbnN0IGZpeHR1cmUgICAgPSByZXF1aXJlKCcuL2ZpeHR1cmVzL1RyZWVXaXRob3V0TmVzdGVkRmlyc3RTbGlkZScpLmRlZmF1bHQ7XG5jb25zdCBtYXBGaXh0dXJlID0gcmVxdWlyZSgnLi9maXh0dXJlcy9NYXBXaXRob3V0TmVzdGVkRmlyc3RTbGlkZScpLmRlZmF1bHQ7XG5cbmxldCByZW5kZXJGaXh0dXJlID0gKG9wdGlvbnMpID0+IFRlc3RVdGlscy5yZW5kZXJJbnRvRG9jdW1lbnQoIGZpeHR1cmUob3B0aW9ucykgKTtcblxuZGVzY3JpYmUoJ1VudmVpbEFwcCcsICgpID0+IHtcbiAgbGV0IGhpc3RvcnksIGVsZW1lbnRzLCBub2RlLCBjb250cm9scztcblxuICBsZXQgY2hlY2tDb250ZW50RXF1YWxzID0gKGNvbnRlbnQpID0+IHtcbiAgICBleHBlY3Qobm9kZS50ZXh0Q29udGVudCkudG9FcXVhbChjb250ZW50KTtcbiAgfTtcblxuICBiZWZvcmVFYWNoKCAoKSA9PiB7XG4gICAgaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoeyBxdWVyeUtleTogZmFsc2UgfSk7XG4gICAgY29udHJvbHMgPSBbVUlDb250cm9scywgS2V5Q29udHJvbHNdO1xuICAgIGVsZW1lbnRzID0gcmVuZGVyRml4dHVyZSh7IGhpc3RvcnksIGNvbnRyb2xzIH0pO1xuICAgIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShlbGVtZW50cy5yZWZzWydjdXJyZW50LXNsaWRlJ10pO1xuICB9KTtcblxuICBhZnRlckVhY2goICgpID0+IHtcbiAgICBlbGVtZW50cyA9IG5vZGUgPSBudWxsO1xuICB9KTtcblxuICBpdCgnY3JlYXRlcyBjb3JyZWN0IG1hcCcsICgpID0+IHtcbiAgICBleHBlY3QoZWxlbWVudHMubWFwKS50b0VxdWFsKG1hcEZpeHR1cmUoKSk7XG4gIH0pO1xuXG4gIGl0KCdzYXZlcyBuZXcgc3RhdGVzJywgKCkgPT4ge1xuICAgIGhpc3RvcnkucHVzaCgnLzEnKTtcbiAgICBleHBlY3QoZWxlbWVudHMucm91dGVyU3RhdGUuaW5kaWNlcykudG9FcXVhbChbMSwgMF0pO1xuICB9KTtcblxuICBsZXQgY2hlY2tDb250ZW50T25Sb3V0ZSA9IChyb3V0ZSwgY29udGVudCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoaXN0b3J5LnB1c2gocm91dGUpO1xuICAgICAgY2hlY2tDb250ZW50RXF1YWxzKGNvbnRlbnQpO1xuICAgIH1cbiAgfTtcblxuICBsZXQgdCA9IChuYW1lLCBwYXRoLCBjb250ZW50KSA9PiBpdChuYW1lLCBjaGVja0NvbnRlbnRPblJvdXRlKHBhdGgsIGNvbnRlbnQpKTtcblxuICB0KCdyb3V0ZXMgdG8gZmlyc3Qgc2xpZGUnLCAnLycsICdMdWtlJyk7XG4gIHQoJ3JvdXRlcyBieSBpbmRleCcsICAgICAgICcvMScsICdWaW5jZW50IFZlZ2EnKTtcbiAgdCgncm91dGVzIGJ5IGluZGljZXMnLCAgICAgJy8xLzEnLCAnSnVsZXMgZWZmaW5nIFdpbm5maWVsZCcpO1xuICB0KCdyb3V0ZXMgYnkgbmFtZScsICAgICAgICAnL3JldHVybi1vZi10aGUtamVkaS9sdWtlJywgJ0x1a2UnKTtcbn0pO1xuIl19