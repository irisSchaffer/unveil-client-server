'use strict';

jest.dontMock('../Utils');

require('../Utils');

describe("Utils", function () {

  describe("Object.prototype.toList", function () {

    it("returns a list from an object, containing the object", function () {
      var a = {};
      var b = [{}];
      expect(a.toList()).toEqual(b);
      expect(a.toList()).not.toEqual(a);
    });

    it("returns itself if the object already is a list", function () {
      var a = [];
      var b = [];
      var c = [[]];
      expect(a.toList()).toEqual(b);
      expect(a.toList()).not.toEqual(c);
    });
  });

  describe("Array.prototype.compact", function () {

    it("removes all null values", function () {
      var a = [1, null];
      var b = [1];
      expect(a.compact()).toEqual(b);
    });

    it("removes all undefined values", function () {
      var a = [1, undefined];
      var b = [1];
      expect(a.compact()).toEqual(b);
    });

    it("removes all empty strings values", function () {
      var a = [1, ""];
      var b = [1];
      expect(a.compact()).toEqual(b);
    });
  });

  describe("Array.prototype.flatten", function () {

    it("flattens an array", function () {
      var a = [1, [2, 3]];
      var b = [1, 2, 3];
      expect(a.flatten()).toEqual(b);
    });

    it("flattens an array recursively", function () {
      var a = [1, [2, [3]]];
      var b = [1, 2, 3];
      expect(a.flatten()).toEqual(b);
    });
  });

  describe("Array.prototype.equals", function () {

    it("fails on different length arrays", function () {
      var a = [1, 2];
      var b = [1, 2, 3];
      expect(a.equals(b)).toEqual(false);
    });

    it("succeeds when arrays have equal length and elements", function () {
      var a = [1, 2, 3];
      var b = [1, 2, 3];
      expect(a.equals(b)).toEqual(true);
    });

    it("fails when arrays have equal length but different elements", function () {
      var a = [1, 2, 3];
      var b = [1, 2, 5];
      expect(a.equals(b)).toEqual(false);
    });

    it("fails when arrays have equal length but differently positioned elements", function () {
      var a = [1, 2, 3];
      var b = [1, 3, 2];
      expect(a.equals(b)).toEqual(false);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvX190ZXN0c19fL1V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsS0FBSyxRQUFMLENBQWMsVUFBZDs7QUFFQSxRQUFRLFVBQVI7O0FBRUEsU0FBUyxPQUFULEVBQWtCLFlBQU07O0FBRXRCLFdBQVMseUJBQVQsRUFBb0MsWUFBTTs7QUFFeEMsT0FBRyxzREFBSCxFQUEyRCxZQUFNO0FBQy9ELFVBQU0sSUFBSSxFQUFKLENBRHlEO0FBRS9ELFVBQU0sSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUZ5RDtBQUcvRCxhQUFPLEVBQUUsTUFBRixFQUFQLEVBQW1CLE9BQW5CLENBQTJCLENBQTNCLEVBSCtEO0FBSS9ELGFBQU8sRUFBRSxNQUFGLEVBQVAsRUFBbUIsR0FBbkIsQ0FBdUIsT0FBdkIsQ0FBK0IsQ0FBL0IsRUFKK0Q7S0FBTixDQUEzRCxDQUZ3Qzs7QUFTeEMsT0FBRyxnREFBSCxFQUFxRCxZQUFNO0FBQ3pELFVBQU0sSUFBSSxFQUFKLENBRG1EO0FBRXpELFVBQU0sSUFBSSxFQUFKLENBRm1EO0FBR3pELFVBQU0sSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUhtRDtBQUl6RCxhQUFPLEVBQUUsTUFBRixFQUFQLEVBQW1CLE9BQW5CLENBQTJCLENBQTNCLEVBSnlEO0FBS3pELGFBQU8sRUFBRSxNQUFGLEVBQVAsRUFBbUIsR0FBbkIsQ0FBdUIsT0FBdkIsQ0FBK0IsQ0FBL0IsRUFMeUQ7S0FBTixDQUFyRCxDQVR3QztHQUFOLENBQXBDLENBRnNCOztBQXFCdEIsV0FBUyx5QkFBVCxFQUFvQyxZQUFNOztBQUV4QyxPQUFHLHlCQUFILEVBQThCLFlBQU07QUFDbEMsVUFBTSxJQUFJLENBQUMsQ0FBRCxFQUFJLElBQUosQ0FBSixDQUQ0QjtBQUVsQyxVQUFNLElBQUksQ0FBQyxDQUFELENBQUosQ0FGNEI7QUFHbEMsYUFBTyxFQUFFLE9BQUYsRUFBUCxFQUFvQixPQUFwQixDQUE0QixDQUE1QixFQUhrQztLQUFO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cEIsQ0FBNEIsS0FBNUIsRUFIa0Y7S0FBTixDQUE5RSxDQXBCdUM7R0FBTixDQUFuQyxDQTNEc0I7Q0FBTixDQUFsQiIsImZpbGUiOiJVdGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImplc3QuZG9udE1vY2soJy4uL1V0aWxzJyk7XG5cbnJlcXVpcmUoJy4uL1V0aWxzJyk7XG5cbmRlc2NyaWJlKFwiVXRpbHNcIiwgKCkgPT4ge1xuXG4gIGRlc2NyaWJlKFwiT2JqZWN0LnByb3RvdHlwZS50b0xpc3RcIiwgKCkgPT4ge1xuXG4gICAgaXQoXCJyZXR1cm5zIGEgbGlzdCBmcm9tIGFuIG9iamVjdCwgY29udGFpbmluZyB0aGUgb2JqZWN0XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGEgPSB7fTtcbiAgICAgIGNvbnN0IGIgPSBbe31dO1xuICAgICAgZXhwZWN0KGEudG9MaXN0KCkpLnRvRXF1YWwoYik7XG4gICAgICBleHBlY3QoYS50b0xpc3QoKSkubm90LnRvRXF1YWwoYSk7XG4gICAgfSk7XG5cbiAgICBpdChcInJldHVybnMgaXRzZWxmIGlmIHRoZSBvYmplY3QgYWxyZWFkeSBpcyBhIGxpc3RcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFtdO1xuICAgICAgY29uc3QgYiA9IFtdO1xuICAgICAgY29uc3QgYyA9IFtbXV07XG4gICAgICBleHBlY3QoYS50b0xpc3QoKSkudG9FcXVhbChiKTtcbiAgICAgIGV4cGVjdChhLnRvTGlzdCgpKS5ub3QudG9FcXVhbChjKTtcbiAgICB9KTtcblxuICB9KTtcblxuICBkZXNjcmliZShcIkFycmF5LnByb3RvdHlwZS5jb21wYWN0XCIsICgpID0+IHtcblxuICAgIGl0KFwicmVtb3ZlcyBhbGwgbnVsbCB2YWx1ZXNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLCBudWxsXTtcbiAgICAgIGNvbnN0IGIgPSBbMV07XG4gICAgICBleHBlY3QoYS5jb21wYWN0KCkpLnRvRXF1YWwoYik7XG4gICAgfSk7XG5cbiAgICBpdChcInJlbW92ZXMgYWxsIHVuZGVmaW5lZCB2YWx1ZXNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLCB1bmRlZmluZWRdO1xuICAgICAgY29uc3QgYiA9IFsxXTtcbiAgICAgIGV4cGVjdChhLmNvbXBhY3QoKSkudG9FcXVhbChiKTtcbiAgICB9KTtcblxuICAgIGl0KFwicmVtb3ZlcyBhbGwgZW1wdHkgc3RyaW5ncyB2YWx1ZXNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLCBcIlwiXTtcbiAgICAgIGNvbnN0IGIgPSBbMV07XG4gICAgICBleHBlY3QoYS5jb21wYWN0KCkpLnRvRXF1YWwoYik7XG4gICAgfSk7XG5cbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJBcnJheS5wcm90b3R5cGUuZmxhdHRlblwiLCAoKSA9PiB7XG5cbiAgICBpdChcImZsYXR0ZW5zIGFuIGFycmF5XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGEgPSBbMSxbMiwzXV07XG4gICAgICBjb25zdCBiID0gWzEsMiwzXTtcbiAgICAgIGV4cGVjdChhLmZsYXR0ZW4oKSkudG9FcXVhbChiKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZmxhdHRlbnMgYW4gYXJyYXkgcmVjdXJzaXZlbHlcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLFsyLFszXV1dO1xuICAgICAgY29uc3QgYiA9IFsxLDIsM107XG4gICAgICBleHBlY3QoYS5mbGF0dGVuKCkpLnRvRXF1YWwoYik7XG4gICAgfSk7XG5cbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJBcnJheS5wcm90b3R5cGUuZXF1YWxzXCIsICgpID0+IHtcblxuICAgIGl0KFwiZmFpbHMgb24gZGlmZmVyZW50IGxlbmd0aCBhcnJheXNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLDJdO1xuICAgICAgY29uc3QgYiA9IFsxLDIsM107XG4gICAgICBleHBlY3QoYS5lcXVhbHMoYikpLnRvRXF1YWwoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzdWNjZWVkcyB3aGVuIGFycmF5cyBoYXZlIGVxdWFsIGxlbmd0aCBhbmQgZWxlbWVudHNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLDIsM107XG4gICAgICBjb25zdCBiID0gWzEsMiwzXTtcbiAgICAgIGV4cGVjdChhLmVxdWFscyhiKSkudG9FcXVhbCh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZmFpbHMgd2hlbiBhcnJheXMgaGF2ZSBlcXVhbCBsZW5ndGggYnV0IGRpZmZlcmVudCBlbGVtZW50c1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBhID0gWzEsMiwzXTtcbiAgICAgIGNvbnN0IGIgPSBbMSwyLDVdO1xuICAgICAgZXhwZWN0KGEuZXF1YWxzKGIpKS50b0VxdWFsKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZmFpbHMgd2hlbiBhcnJheXMgaGF2ZSBlcXVhbCBsZW5ndGggYnV0IGRpZmZlcmVudGx5IHBvc2l0aW9uZWQgZWxlbWVudHNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IFsxLDIsM107XG4gICAgICBjb25zdCBiID0gWzEsMywyXTtcbiAgICAgIGV4cGVjdChhLmVxdWFscyhiKSkudG9FcXVhbChmYWxzZSk7XG4gICAgfSk7XG5cbiAgfSk7XG5cbn0pO1xuIl19